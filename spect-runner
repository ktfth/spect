#!/usr/bin/env node
// Test runner
const fs = require('fs');
const path = require('path');
const assert = require('assert');

global.total = 0;
global.passed = 0;

class Runner {
  constructor(opts = { suppressLog: false }) {
    this.tests = [];
    this.opts = opts;
    this.total = 0;
    this.passed = 0;

    this.init = this.init.bind(this);

    this.code = this.init();
  }

  init() {
    const self = this;
    const workingPath = path.resolve(process.cwd(), process.argv[2]);
    let requires = fs.readdirSync(path.dirname(workingPath));

    requires = requires
      .filter(isTestFile.bind({ workingPath }))
      .map(toCompleteModule);

    global.test = (name, fn) => {
      global.total += 1;
      const testCaseName = requires[global.total];
      try {
        fn();
        global.passed += 1;
      } catch (e) {
        if (testCaseName) {
          console.log(`[FAILED] ${testCaseName}: ${name}!`);
        } else {
          console.log(`[FAILED] ${name}!`);
        }
        console.log(e.stack);
      }
    };

    const tests = requires.map(require).map((mod, i) => {
      return {
        name: requires[i],
        testCase: mod,
      };
    });

    self.tests = tests;
    self.total = global.total;
    self.passed = global.passed;

    if (!self.opts.suppressLog) {
      console.log('');
      console.log(`${self.passed} / ${self.total} tests passed.`);
      console.log('');
    }

    return self.total - self.passed;
  }
}
exports.Runner = Runner;

function isTestFile(f) {
  const workingPath = this.workingPath || '';
  const workingPathBasename = path.basename(workingPath);
  try {
    const rTestFile = new RegExp(workingPathBasename);
    return rTestFile.test(f);
  } catch (e) {
    return f === workingPathBasename;
  }
}
exports.isTestFile = isTestFile;

function toCompleteModule(f) {
  const workingPath = path.dirname(path.resolve(process.cwd(), process.argv[2]));
  return `${workingPath}/${f.replace(/\.js$/, '')}`;
}
exports.toCompleteModule = toCompleteModule;

if (!module.parent) {
  const spect = new Runner();
  process.exit(spect.code);
}
